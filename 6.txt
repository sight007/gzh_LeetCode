/**
 *给定一个字符串和行数，要求从上往下、从左往右进行n行Z字形排列。
 *
 *这道题的脑洞也是清奇，我直接就想起s难度动作Z字抖动，其实这里要求的是V字排列。
 *
 */
 
/**
 *方法一：“两个if + 累加” 巧妙地实现了方向的转折
 *        第一个if，实现转折方向的控制第二个if，实现转折后的累加累加后变量累加，实现了最后的变化。		         
 */
 
public String convert(String s, int numRows){
	if(numRows==1) return s;
	
	List<StringBuild> rows = new ArrayList<>();
	for(int i=0; i<Math.max(numRows, s.length()); i++){
		rows.add(new StringBuild());
	}
	
	int curRow=0;
	Boolean goingdown = false;
	
	for(char c : s.toCharArray()){
		rows.get(curRow).append(c);
		if(curRow==0 || curRow==s.length()-1){
			goingdown = !goingdown;
		}
		
		int add=0;
		if(goingdown){
			add=1;
		}else{
			add=-1;
		}
		
		curRow=curRow+add; 
		
	}
	
}


/*
 *方法二：这个方法过于精巧，它是直接计算出了每行字符的位置。
 *
 */ 

public String convert(String s, int numRows){
	if(numRows == 1) return s;
	
	StringBuild sb = new StringBuild();
	int n = s.length();
	
	/*
	 *          a     g     m     s     y
	 *          b   f h   l n   r t   x z
	 *          c e   i k   o q   u w
	 *          d     j     p     v
	 *
	 *	如上图26个字母4行排序，每个规则的竖行字符相隔（2*numRows-2），这个不仔细观察是看不出来的；
	 *  第一行第一列，2*numRows-2+i
	 *	间隔字符对于规则竖行字符的位置再减i
	 *
	 */
	int cycleLen = 2 * numRows - 2;
	for(int i=0; i<numRows; i++){
		for(int j=0; j+i<n; j+=cycleLen){
			sb.append(s.chartAt(j+i));
			if(i != 0 && i != numRows-1 && j+cycleLen-i<n){
				sb.append(s.chartAt(j+cycleLen-i));
			}
		}
	}
	
	return sb.toString();
	
}
