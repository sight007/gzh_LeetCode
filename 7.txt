/*
 *7.给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。
 *
 *	2^31-1 = 2147483647（上限）
 *  -2^31 = -2147483648（下限）
 *包括0，上面总共有2^32个数字	
 *  
 *
 *这道题最重要的地方在于数值限制，有些数未反转之前在范围内，反转之后就在指定范围外了。
 *如，2147483646，只比上限少一，反转之后铁定超出上限.
 *
 *注意java int为32位，最大值为2147483647，任何大于它的int值会变成负数，当然就不是原来数字的翻转了。
 *所以，隐含的条件是如果超出范围，请返回错误
 *
 */

 
/*
 *这个方法就是<取余数，乘以10，再加余数>这个过程的不断循环，if语句实现了上下限的检验
 *
 *while循环之内三个变量的相互转换，以前常见的是两个变量的，这也是个亮点
 *
 *复杂度应该是O(log10(x))
 */
 
public int reverse(int x){
	int result = 0;
	while(x>0){
		int temp = result*10 + x%10;
		
		//如果result没超出范围，temp超出了2147483647，那么temp必然为负值，so，(temp/10 != result)为真，方法退出。
		if(temp/10 != result) return 0;
		
		result = temp;
		x /= 10;
	}
	return 0;
}



//上面的if语句太过于优秀，比标准解法还简介。下面是标准方法的if判断。
//-8 和 7 就代表了上下限的最后一个数字
if(temp>Integer.MAX_VALUE/10 || (temp==Integer.MAX_VALUE/10 && x%10>7))   return 0;  //超出上限返回0
if(temp>Integer.MAX_VALUE/10 || (temp==Integer.MAX_VALUE/10 && x%10<-8))) return 0;  //超出下限返回0
