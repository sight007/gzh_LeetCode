/**
 * 8、判断一个整数是否是回文数。回文数是指正序（从左到右）和倒序（从右向左）读都是一样的整数。 121 2332 
 * 进阶：你能不将整数转化成字符串来解决这个问题吗？
 * 
 * 想法：（1）前面有个中心扩展算法，找到字符串的中心，然后左右判断是否相同，以此类推
 *        (2) 字符串翻转
 *       （3）拆成数字，反方向组装，如果相等，则回文
 *		 （4）拆成数字，反方向组装一半，如果与另一半相等，则回文
 *
 * 第三种一半反转判同的办法明显在时间和空间复杂度上远少于前两种
 */
 
public Boolean halfReverse(int x){
	
	//1、如果小于0，肯定不是回文数
	//2、如果最后一位数为0，那么也不是回文数;只有为0时，它才是回文数
	if(x<0 || (x%10 == 0 && x != 0)) return false;
	
	int reverseNum = 0;
	while(x>reverseNum){
		reverseNum = reverseNum*10 + x%10;
		x /= 10;
	}
	
	//偶数位时直接相等就行1221
	//奇数位时往前推一位 131（1和1相等就行，之前思路为13和13相等，这个不太好做）
	return x==reverseNum || x==reverseNum/10;
	
}
 
 
//每次循环都除以10，时间复杂度为O(log10(n))
//空间复杂度O(1)，不随数字的大小而变化